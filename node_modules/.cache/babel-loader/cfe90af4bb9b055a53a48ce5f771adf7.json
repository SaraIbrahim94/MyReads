{"ast":null,"code":"const api = \"https://reactnd-books-api.udacity.com\";\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\nexport const get = bookId => fetch(`${api}/books/${bookId}`, {\n  headers\n}).then(res => res.json()).then(data => data.book);\nexport const getAll = () => fetch(`${api}/books`, {\n  headers\n});\nexport const update = (book, shelf) => fetch(`${api}/books/${book.id}`, {\n  method: \"PUT\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    shelf\n  })\n}).then(res => res.json());\nexport const search = (query, maxResults) => fetch(`${api}/search`, {\n  method: \"POST\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    query,\n    maxResults\n  })\n});\n// .then((res) => res.json())\n//.then((data) => data.books);","map":{"version":3,"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","update","shelf","id","method","body","JSON","stringify","search","query","maxResults"],"sources":["/Users/saraibrahim/Desktop/Tuts/React/MyReads-Final/starter/src/BooksAPI.js"],"sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n    fetch(`${api}/books`, { headers });\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n   // .then((res) => res.json())\n    //.then((data) => data.books);\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uCAAuC;AAEnD,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAK;AAE9B,IAAI,CAACA,KAAK,EAAEA,KAAK,GAAGC,YAAY,CAACD,KAAK,GAAGE,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AAE9E,MAAMC,OAAO,GAAG;EACdC,MAAM,EAAE,kBAAkB;EAC1BC,aAAa,EAAER;AACjB,CAAC;AAED,OAAO,MAAMS,GAAG,GAAIC,MAAM,IACxBC,KAAK,CAAE,GAAEZ,GAAI,UAASW,MAAO,EAAC,EAAE;EAAEJ;AAAQ,CAAC,CAAC,CACzCM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC;AAE9B,OAAO,MAAMC,MAAM,GAAG,MAClBN,KAAK,CAAE,GAAEZ,GAAI,QAAO,EAAE;EAAEO;AAAQ,CAAC,CAAC;AAEtC,OAAO,MAAMY,MAAM,GAAG,CAACF,IAAI,EAAEG,KAAK,KAChCR,KAAK,CAAE,GAAEZ,GAAI,UAASiB,IAAI,CAACI,EAAG,EAAC,EAAE;EAC/BC,MAAM,EAAE,KAAK;EACbf,OAAO,EAAE;IACP,GAAGA,OAAO;IACV,cAAc,EAAE;EAClB,CAAC;EACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;IAAEL;EAAM,CAAC;AAChC,CAAC,CAAC,CAACP,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC;AAE9B,OAAO,MAAMW,MAAM,GAAG,CAACC,KAAK,EAAEC,UAAU,KACtChB,KAAK,CAAE,GAAEZ,GAAI,SAAQ,EAAE;EACrBsB,MAAM,EAAE,MAAM;EACdf,OAAO,EAAE;IACP,GAAGA,OAAO;IACV,cAAc,EAAE;EAClB,CAAC;EACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;IAAEE,KAAK;IAAEC;EAAW,CAAC;AAC5C,CAAC,CAAC;AACD;AACC"},"metadata":{},"sourceType":"module"}